// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PingerClient is the client API for Pinger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingerClient interface {
	LoadEbpf(ctx context.Context, in *LoadEbpfRequest, opts ...grpc.CallOption) (*Empty, error)
	UnloadEbpf(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StreamPerf(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Pinger_StreamPerfClient, error)
}

type pingerClient struct {
	cc grpc.ClientConnInterface
}

func NewPingerClient(cc grpc.ClientConnInterface) PingerClient {
	return &pingerClient{cc}
}

func (c *pingerClient) LoadEbpf(ctx context.Context, in *LoadEbpfRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Pinger/LoadEbpf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingerClient) UnloadEbpf(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Pinger/UnloadEbpf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingerClient) StreamPerf(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Pinger_StreamPerfClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pinger_serviceDesc.Streams[0], "/Pinger/StreamPerf", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingerStreamPerfClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pinger_StreamPerfClient interface {
	Recv() (*PerfMessage, error)
	grpc.ClientStream
}

type pingerStreamPerfClient struct {
	grpc.ClientStream
}

func (x *pingerStreamPerfClient) Recv() (*PerfMessage, error) {
	m := new(PerfMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingerServer is the server API for Pinger service.
// All implementations must embed UnimplementedPingerServer
// for forward compatibility
type PingerServer interface {
	LoadEbpf(context.Context, *LoadEbpfRequest) (*Empty, error)
	UnloadEbpf(context.Context, *Empty) (*Empty, error)
	StreamPerf(*Empty, Pinger_StreamPerfServer) error
	mustEmbedUnimplementedPingerServer()
}

// UnimplementedPingerServer must be embedded to have forward compatible implementations.
type UnimplementedPingerServer struct {
}

func (UnimplementedPingerServer) LoadEbpf(context.Context, *LoadEbpfRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadEbpf not implemented")
}
func (UnimplementedPingerServer) UnloadEbpf(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnloadEbpf not implemented")
}
func (UnimplementedPingerServer) StreamPerf(*Empty, Pinger_StreamPerfServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPerf not implemented")
}
func (UnimplementedPingerServer) mustEmbedUnimplementedPingerServer() {}

// UnsafePingerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingerServer will
// result in compilation errors.
type UnsafePingerServer interface {
	mustEmbedUnimplementedPingerServer()
}

func RegisterPingerServer(s grpc.ServiceRegistrar, srv PingerServer) {
	s.RegisterService(&_Pinger_serviceDesc, srv)
}

func _Pinger_LoadEbpf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadEbpfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingerServer).LoadEbpf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pinger/LoadEbpf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingerServer).LoadEbpf(ctx, req.(*LoadEbpfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinger_UnloadEbpf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingerServer).UnloadEbpf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pinger/UnloadEbpf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingerServer).UnloadEbpf(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinger_StreamPerf_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingerServer).StreamPerf(m, &pingerStreamPerfServer{stream})
}

type Pinger_StreamPerfServer interface {
	Send(*PerfMessage) error
	grpc.ServerStream
}

type pingerStreamPerfServer struct {
	grpc.ServerStream
}

func (x *pingerStreamPerfServer) Send(m *PerfMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Pinger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pinger",
	HandlerType: (*PingerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadEbpf",
			Handler:    _Pinger_LoadEbpf_Handler,
		},
		{
			MethodName: "UnloadEbpf",
			Handler:    _Pinger_UnloadEbpf_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPerf",
			Handler:       _Pinger_StreamPerf_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ping/ping.proto",
}
