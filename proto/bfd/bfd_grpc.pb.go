// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bfd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BFDClient is the client API for BFD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BFDClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	SessionState(ctx context.Context, in *SessionStateRequest, opts ...grpc.CallOption) (BFD_SessionStateClient, error)
	ChangeMode(ctx context.Context, in *ChangeModeRequest, opts ...grpc.CallOption) (*Empty, error)
}

type bFDClient struct {
	cc grpc.ClientConnInterface
}

func NewBFDClient(cc grpc.ClientConnInterface) BFDClient {
	return &bFDClient{cc}
}

func (c *bFDClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/BFD/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFDClient) SessionState(ctx context.Context, in *SessionStateRequest, opts ...grpc.CallOption) (BFD_SessionStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BFD_serviceDesc.Streams[0], "/BFD/SessionState", opts...)
	if err != nil {
		return nil, err
	}
	x := &bFDSessionStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BFD_SessionStateClient interface {
	Recv() (*SessionInfo, error)
	grpc.ClientStream
}

type bFDSessionStateClient struct {
	grpc.ClientStream
}

func (x *bFDSessionStateClient) Recv() (*SessionInfo, error) {
	m := new(SessionInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bFDClient) ChangeMode(ctx context.Context, in *ChangeModeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/BFD/ChangeMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BFDServer is the server API for BFD service.
// All implementations must embed UnimplementedBFDServer
// for forward compatibility
type BFDServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	SessionState(*SessionStateRequest, BFD_SessionStateServer) error
	ChangeMode(context.Context, *ChangeModeRequest) (*Empty, error)
	mustEmbedUnimplementedBFDServer()
}

// UnimplementedBFDServer must be embedded to have forward compatible implementations.
type UnimplementedBFDServer struct {
}

func (UnimplementedBFDServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedBFDServer) SessionState(*SessionStateRequest, BFD_SessionStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SessionState not implemented")
}
func (UnimplementedBFDServer) ChangeMode(context.Context, *ChangeModeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMode not implemented")
}
func (UnimplementedBFDServer) mustEmbedUnimplementedBFDServer() {}

// UnsafeBFDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BFDServer will
// result in compilation errors.
type UnsafeBFDServer interface {
	mustEmbedUnimplementedBFDServer()
}

func RegisterBFDServer(s grpc.ServiceRegistrar, srv BFDServer) {
	s.RegisterService(&_BFD_serviceDesc, srv)
}

func _BFD_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFDServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BFD/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFDServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFD_SessionState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BFDServer).SessionState(m, &bFDSessionStateServer{stream})
}

type BFD_SessionStateServer interface {
	Send(*SessionInfo) error
	grpc.ServerStream
}

type bFDSessionStateServer struct {
	grpc.ServerStream
}

func (x *bFDSessionStateServer) Send(m *SessionInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _BFD_ChangeMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFDServer).ChangeMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BFD/ChangeMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFDServer).ChangeMode(ctx, req.(*ChangeModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BFD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BFD",
	HandlerType: (*BFDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _BFD_CreateSession_Handler,
		},
		{
			MethodName: "ChangeMode",
			Handler:    _BFD_ChangeMode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SessionState",
			Handler:       _BFD_SessionState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bfd/bfd.proto",
}
